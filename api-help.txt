API HELP :

REQUEST FORM - TO TEST
    {'type' : <type>, 'cmd' : <cmd>, ...}
    -> Reply to request
    => Message recieved without request


ERROR - TO TEST
    => Error recieved
        'type' : 'error'
        'error' : <error>


CONNECTION
    with token - TO TEST
        'type' : 'connect'
        'cmd' : 'by_token'
        'token' : <token>
        -> 'type' : 'connectionReply'
           'success' : true | false
           'error' : <error> #Empty in case of success = true

    with username - TO TEST
        'type' : 'connect'
        'cmd' : 'by_username'
        'username' : <username>
        'password' : <password>
        -> 'type' : 'connectionReply'
           'success' : true | false
           'error' : <error> #Empty in case of success = true


MESSAGE
    send message - TO TEST
        'type' : 'message'
        'cmd' : 'sendMessage'
        'message' : <message>
        'channel' : 'general' | <user id>
        -> {{message}}

    => Message recieved
        {{message}}

    => Server message recieved
        'type' : 'serverMessage'
        'message' : <message>
        'date' : <date>

    => Invite recieved
        'type' : 'invite'
        'username' : <username>
        'pp' : <profile picture link>
        'date' : <date>
        'roomId' : <room id>

    {{message}} :
        'type' : 'message'
        'message' : <message>
        'username' : <username>
        'pp' : <profile picture link>
        'date' : <date>
        'channel' : 'general' | <user id>


QUICK GAME ROOM
    ask for new game
        'type' : 'quickRoom'
        'cmd' : 'askForRoom'
        -> No more field

    quit game wait
        'type' : 'quickRoom'
        'cmd' : 'quitRoom'
        -> No more field

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id> # 0 left, 1 right


GAME ROOM
    create game room
        'type' : 'gameRoom'
        'cmd' : 'createRoom'
        -> <update room info>

    join game room
        'type' : 'gameRoom'
        'cmd' : 'joinRoom'
        'gameRoomId' : <game room id>
        -> {{update room info}}

    /!\ Only the creator of the room can use it /!\
    send game room invite
        'type' : 'gameRoom'
        'cmd' : 'inviteGameRoom'
        'targetId' : <user id> | 'ia'
        'roomId' : <roomId>
        -> No more field

    quit game room
        'type' : 'quickRoom'
        'cmd' : 'quitGameRoom'
        -> No more field

    change team
        'type' : 'gameRoom'
        'cmd' : 'changeTeam'
        'team' : 'left' | 'right'
        -> {{update room info}}

    /!\ Only the creator of the room can use it /!\
    change power up option
        'type' : 'gameRoom'
        'cmd' : 'changePowerUp'
        -> {{update room info}}

    /!\ Only the creator of the room can use it /!\
    change map option
        'type' : 'gameRoom'
        'cmd' : 'changeMap'
        'mapId' : <map id>
        -> {{update room info}}

    change ready state
        'type' : 'gameRoom'
        'cmd' : 'changeReady'
        -> No more field

    /!\ Only the creator of the room can use it /!\
    start game
        'type' : 'gameRoom'
        'cmd' : 'startGame'
        -> 'type' : 'startGame'
           'success' : true | false

    => update room info
        {{update room info}}

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id> # 0 left, 1 right

    {{update room info}} :
        'type' : 'updateRoomInfo'
        'teamLeft' : [<paddleInfo>, <paddleInfo>]
        'teamRight' : [<paddleInfo>, <paddleInfo>]
        'teamLeftReady' : [<readyInfo>, <readyInfo>]
        'teamRightReady' : [<readyInfo>, <readyInfo>]
        'powerUpActivate' : false | true
        'mapId' : <map id>

    <paddleInfo> :
        - null = no player
        - 'ia' = paddle control by ia
        - 'pending-<user id>' = wait for the response of <user id>
        - <user id> = player

    <readyInfo> :
        - null = no player
        - false = not ready
        - true = ready


TOURNAMENT
    /!\ Only the administrator can create tournament /!\
    create tournament
        'type' : 'tournament'
        'cmd' : 'create'
        'start' : <start date>
        'powerUp' : true | false
        'mapId' : <map id>
        -> No more field

    join tournament
        'type' : 'tournament'
        'cmd' : 'join'
        -> 'type' : 'joinReply'
           'tournamentUserId' : <tournament user id>

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id>

    => match result
        'type' : 'matchResult'
        'winner' : <tournament user id>
        'loser' : <tournament user id>

    => end tournament
        'type' : 'endTournament'
        'onePongMan' : <tournament user id>


/!\ All messages for and from game are in it's websocket /!\
GAME
	player identification
		'type' : 'userIdentification'
		'id_paddle' : <id paddle>
		'id_team' : <id team>
		-> No more field

    player input
        'type' : 'userInput'
        'key' : 'up' | 'down' | 'powerUp' | 'launchBall'
        'value' : 'press' | 'release'
        -> No more field

    => start info
        'type' : 'startInfo'
        'obstacles' : [<obstacles>, ...]
        'powerUp' : true | false

    => server info
        'type' : 'serverInfo'
        'updateObstacles' : [[<obstacles index>, [<point>, ...]], ...] | null
        'updatePaddles' : [<paddles>, ...]  | null
        'updateBalls' : [<ball>, ...] | null
        'deleteBall' : [<ball index>, ...]  | null
        'changeUserPowerUp' :  <power up id> | null 					
        'updatePowerUpInGame' : <powerUp> | null 
        'updateScore' : [<score left, score right>]  | null

    => end game
        'type' : 'endGame' # Not the movie
        'leftTeamScore' : <left team score>
        'rightTeamScore' : <right team score>

	<powerUp> :
		[<point>, true | false] {=} ['coordonne', 'visible']

    <paddles> :
		[<point>, <point>, <point>, <point>, <team id>, <paddle id> ] {=} ['topLeft', 'botLeft','topRight','botRight','teamId','paddleId']

	<team id> :
		0 | 1 {=} left | right

    <ball> :
		[<point>, <point>, int, int] {=} ['position', 'direction', 'radius', 'speed']

    <point> :
		[float, float] {=} ['x', 'y']
