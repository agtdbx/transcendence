API HELP :

REQUEST FORM - TO TEST
    {'type' : <type>, 'cmd' : <cmd>, ...}
    -> Reply to request
    => Message recieved without request


ERROR - TO TEST
    => Error recieved
        'type' : 'error'
        'error' : <error>


CONNECTION
    with token - TO TEST
        'type' : 'connect'
        'cmd' : 'by_token'
        'token' : <token>
        -> 'type' : 'connectionReply'
           'success' : true | false
           'error' : <error> #Empty in case of success = true

    with username - TO TEST
        'type' : 'connect'
        'cmd' : 'by_username'
        'username' : <username>
        'password' : <password>
        -> 'type' : 'connectionReply'
           'success' : true | false
           'error' : <error> #Empty in case of success = true


MESSAGE
    send message - TO TEST
        'type' : 'message'
        'cmd' : 'sendMessage'
        'message' : <message>
        'channel' : 'general' | <user id>
        -> {{message}}

    => Message recieved
        {{message}}

    => Invite recieved
        'type' : 'invite'
        'username' : <username>
        'pp' : <profile picture link>
        'roomId' : <room id>

    {{message}} :
        'type' : 'message'
        'message' : <message>
        'username' : <username> # if it's "Mission Control", it's a server message
        'pp' : <profile picture link>
        'date' : <date>
        'channel' : 'general' | <user id>


QUICK GAME ROOM
    ask for new game
        'type' : 'quickRoom'
        'cmd' : 'askForRoom'
        -> 'type' : 'joinWaitlist'

    quit game wait
        'type' : 'quickRoom'
        'cmd' : 'quitRoom'
        -> 'type' : 'quitWaitlist'

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id> # 0 left, 1 right


GAME ROOM
    create game room
        'type' : 'gameRoom'
        'cmd' : 'createRoom'
        -> 'type' : 'createRoomInfo'
           {{update room info}}

    join game room
        'type' : 'gameRoom'
        'cmd' : 'joinRoom'
        'gameRoomId' : <game room id>
        -> 'type' : 'joinRoomInfo'
           {{join room info}}

    quit game room
        'type' : 'gameRoom'
        'cmd' : 'quitGameRoom'
        -> 'type' : 'quitGameRoom'

    /!\ Only the creator of the room can use it /!\
    send game room invite
        'type' : 'gameRoom'
        'cmd' : inviteGameRoom'
        'targetId' : <user id>
        -> No more field

    /!\ Only the creator of the room can use it /!\
    quick user from room
        'type' : 'gameRoom'
        'cmd' : 'quickUser'
        'targetId' : <user id>
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    /!\ Only the creator of the room can use it /!\
    add bot to a team
        'type' : 'gameRoom'
        'cmd' : 'addBot'
        'team' : 'left' | 'right'
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    /!\ Only the creator of the room can use it /!\
    remove bot to a team
        'type' : 'gameRoom'
        'cmd' : 'removeBot'
        'team' : 'left' | 'right'
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    change team
        'type' : 'gameRoom'
        'cmd' : 'changeTeam'
        'team' : 'left' | 'right'
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    /!\ Only the creator of the room can use it /!\
    change power up option
        'type' : 'gameRoom'
        'cmd' : 'changePowerUp'
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    /!\ Only the creator of the room can use it /!\
    change map
        'type' : 'gameRoom'
        'cmd' : 'changeMap'
        'mapId' : <map id>
        -> 'type' : 'updateRoomInfo'
           {{update room info}}

    /!\ Only the creator of the room can use it /!\
    start game
        'type' : 'gameRoom'
        'cmd' : 'startGame'
        -> 'type' : 'startGame'
           'success' : true | false

    => invite reply
        'type' : 'ReplyGameRoom'
        'targetId' : <user id> | 'ia'
        'success' : true | false

    => someone quit game room
        'type' : 'quitGameRoom'
        {{update room info}}

    => quick from game room # When the creator leave the game room
        'type' : 'quickFromGameRoom'

    => update room info
        'type' : 'updateRoomInfo'
        {{update room info}}

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id> # 0 left, 1 right

    {{update room info}} :
        'mapId' : <map id>
        'powerUpActivate' : false | true
        'teamLeft' : [<user id>] # if id -1, it's an ia
        'teamRight' : [<user id>]


TOURNAMENT
    /!\ Only the administrator can create tournament /!\
    create tournament
        'type' : 'tournament'
        'cmd' : 'create'
        'powerUp' : true | false
        'mapId' : <map id>
        -> {{tournament state}}

    /!\ Only the administrator can modify tournament /!\
    switch tournament power up
        'type' : 'tournament'
        'cmd' : 'modifyPowerUp'
        -> {{tournament state}}

    /!\ Only the administrator can modify tournament /!\
    modify tournament map id
        'type' : 'tournament'
        'cmd' : 'modifyMapId'
        'mapId' : <map id>
        -> {{tournament state}}

    /!\ Only the administrator can start tournament /!\
    start tournament
        'type' : 'tournament'
        'cmd' : 'start'
        -> 'type' : 'tournamentStart'
           'powerUp' : true | false
           'mapId' : <map id>,
           'mapName' : <map name>
           'players' : [<user view>]
           'inTournament' : true | false

    join tournament
        'type' : 'tournament'
        'cmd' : 'join'
        'nickname' : <nickname>
        -> 'type' : 'joinReply'
           'powerUp' : true | false
           'mapName' : <map name>
           'players' : [<user view>]

    quit tournament # if the tournament has begun, it will not work
        'cmd' : 'quit'
        -> 'type' : 'quitReply'

    get tournament info
        'type' : 'tournament'
        'cmd' : 'getInfo'
        -> '{{tournament state}}

    get user of tournament
        'type' : 'tournament'
        'cmd' : 'getUserTournament'
        -> 'type' : 'tournamentPlayersList'
           'players' : [<user view>]

    get if the user is in tournament
        'type' : 'tournament'
        'cmd' : 'IsUserInTournament'
        -> 'type' : 'InTournament'
           'inTournament' : true | false

    get tournament tree
        'type' : 'tournament'
        'cmd' : 'getTournamentTree'
        -> type' : 'tournamentTreeUpdate'
           'playersGrade' : [[<user nickname>, <user grade>]]
           # Grade if for placement in tournament.
           # 0 for quarters, 1 for half final, 2 final and 3 winner

    /!\ Only work if the tournament has begin /!\
    get next match of tournament
        'type' : 'tournament'
        'cmd' : 'nextMatch'
        -> 'type' : 'nextMatch'
           'match' : [<user view> | null, <user view> | null] | null
           # null in user = user not know
           # all null = no future match (end of tournament)

    /!\ Only work if the tournament has begin /!\
    get next match of user
        'type' : 'tournament'
        'cmd' : 'myNextMatch'
        -> 'type' : 'myNextMatch'
           'match' : [<user view> | null, <user view> | null] | null
           # null in user = user not know
           # all null = no future match (loser)
           
    /!\ Only work if the tournament is finish /!\
	get winners
        'type' : 'tournament'
        'cmd' : 'winners'
        -> 'type' : 'winnersTournament'
           'onePongMan' : <user view>
           'second' : <user view>
           'third' : <user view>

    => {{tournament state}}

    => Game start
        'type' : 'gameStart'
        'gamePort' : <port> # port of the websocket for game
        'paddleId' : <paddle id>
        'teamId' : <team id>

    => update tournament tree
        'type' : 'tournamentTreeUpdate'
        'winner' : <user view> | null            # null for empty
        'final' : (<user view> | null) * 2
        'half' : (<user view> | null) * 4
        'quarter' : (<user view> | null) * 8

    => nextMatch
        'type' : 'nextMatch'
        'playerLeft' : <user view>
        'playerRight' : <user view>

    => end tournament
        'type' : 'endTournament'
        'onePongMan' : <user view>
        'second' : <user view>
        'third' : <user view>

    {{tournament state}}
        'type' : 'tournamentState'
        'status' : 0 | 1 | 2 | 3
        # 0 = nothing, 1 = create, 2 = start, 3 = finish
        'powerUp' : true | false
        'mapId' : <map id>
        'mapName' : <map name>
        'players' : [<user view>]
        'youAreInTournament' : true | false

    <user view>
        [<user id>, <user pp>, <tournament user nickmane>] # -1 id for bot


/!\ All messages for and from game are in it's websocket /!\
GAME
    player identification
        'type' : 'userIdentification'
        'id_paddle' : <id paddle>
        'id_team' : <id team>
        -> No more field

    player input
        'type' : 'userInput'
        'key' : 'up' | 'down' | 'powerUp' | 'launchBall'
        'value' : 'press' | 'release'
        -> No more field

    => start info
        'type' : 'startInfo'
        'obstacles' : [<obstacles>, ...]
        'powerUp' : true | false
        'nbPlayerTeamLeft' : int
        'nbPlayerTeamRight' : int

    => start info
        'type' : 'startCount'
        'number' : int (5 to 0)


    => server info
        'type' : 'serverInfo'
        'updateObstacles' : [[<obstacles index>, <point>, [<point>, ...]], ...] | null
        'updatePaddles' : [<paddles>, ...]  | null
        'updateBalls' : [<ball>, ...] | null
        'deleteBall' : [<ball index>, ...]  | null
        'changeUserPowerUp' :  <power up id> | null
        'updatePowerUpInGame' : <powerUp> | null
        'updateScore' : [<score left, score right>]  | null

    => end game
        'type' : 'endGame' # Not the movie
        'leftTeamScore' : <left team score>
        'rightTeamScore' : <right team score>

    <powerUp> :
        [<point>, true | false] {=} ['coordonne', 'visible']

    <paddles> :
        [<point>, float, <team id>, <paddle id> , int] {=} ['position', 'modifiersize', 'teamId','paddleId', 'powerUpInCharge']

    <team id> :
        0 | 1 {=} left | right

    <ball> :
        [<point>, <point>, int, int, int, int] {=} ['position', 'direction', 'radius', 'speed', 'status', 'modifier_state']

    <point> :
        [float, float] {=} ['x', 'y']
